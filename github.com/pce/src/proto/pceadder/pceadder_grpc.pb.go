// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pceadderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PceAdderClient is the client API for PceAdder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PceAdderClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type pceAdderClient struct {
	cc grpc.ClientConnInterface
}

func NewPceAdderClient(cc grpc.ClientConnInterface) PceAdderClient {
	return &pceAdderClient{cc}
}

func (c *pceAdderClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pceadder.PceAdder/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PceAdderServer is the server API for PceAdder service.
// All implementations must embed UnimplementedPceAdderServer
// for forward compatibility
type PceAdderServer interface {
	Add(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedPceAdderServer()
}

// UnimplementedPceAdderServer must be embedded to have forward compatible implementations.
type UnimplementedPceAdderServer struct {
}

func (UnimplementedPceAdderServer) Add(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPceAdderServer) mustEmbedUnimplementedPceAdderServer() {}

// UnsafePceAdderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PceAdderServer will
// result in compilation errors.
type UnsafePceAdderServer interface {
	mustEmbedUnimplementedPceAdderServer()
}

func RegisterPceAdderServer(s grpc.ServiceRegistrar, srv PceAdderServer) {
	s.RegisterService(&_PceAdder_serviceDesc, srv)
}

func _PceAdder_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceAdderServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pceadder.PceAdder/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceAdderServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _PceAdder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pceadder.PceAdder",
	HandlerType: (*PceAdderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PceAdder_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pce/service/pceadder.proto",
}
